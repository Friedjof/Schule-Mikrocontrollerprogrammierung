C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*****************************************************************************
   2          h e i n r i c h -h e r t z -b e r u f s k o l l e g  d e r  s t a d t  b o n n
   3          Autor:      Friedjof Noweck
   4          Klasse:     IH119
   5          Datum:      2022-04-01 Fr
   6          Datei:      main.c
   7          Einsatz:    Schulungskontroller REG517A
   8          Beschreibung:   Zeigt Zeit an im Format WT, TT.MM.JJJJ - hh:mm:ss.ms
   9          Funktionen:   Kann über den I2C Bus die Uhr setzen und abfragen
  10          ******************************************************************************
  11          Aenderungen:
  12          2022-03-04  APIs einbinden
  13          2022-03-09  mm:hh:ss hinzugefüht
  14          2022-03-18  Hinzufügen der TT.MM
  15          2022-03-23  Hinzufügen des Jahres
  16          2022-03-25  Lösung des Wochentagsproblem
  17          2022-03-26  Vierstellige Jahreszahlen
  18          2022-03-27  Hinzufügen von Test Daten und das Durchführen von Tests
  19          *****************************************************************************/
  20          /******************* Text im Quelltext einbinden *********************/
  21          #include "REG517A.h"
  22          #include "I2C_api.h"
  23          #include "lcd_api.h"
  24          #include "RTC_api.h"
  25          /*************************** Konstanten ******************************/
  26          volatile unsigned char xdata i2c_reg _at_ 0xffa0;
  27          volatile unsigned char xdata i2c_s1 _at_ 0xffa1;
  28          
  29          unsigned char xdata xmem[0x0feff] _at_ 0;
  30          
  31          volatile char xdata cmd _at_ 0xFF80;
  32          volatile char xdata chr _at_ 0xFF82;
  33          
  34          /*********************** globale Variablen ***************************/
  35          unsigned char rtc_buf[16];
  36          unsigned char RTC_ADDR = 0x0a0;
  37          char Text[] = "XX, XX.XX.XXXX\nXX:XX:XX.XX";
  38          
  39          /************************** Prototypen *******************************/
  40          void init_I2C();
  41          void init_LCD();
  42          void Clear_LCD();
  43          void showChar(char value);  
  44          void showText(char* value);
  45          void i2c_xmit(unsigned char slave_addr, unsigned char length,unsigned char * buffer);
  46          unsigned char i2c_rcv(unsigned char slave_addr, unsigned char word_addr,unsigned char length, unsigned cha
             -r * buffer);
  47          void rtc_settime(unsigned char dt, unsigned char mt, unsigned char hh, unsigned char mm, unsigned char ss)
             -;
  48          void rtc_readtime(unsigned char *dt, unsigned char *mt, unsigned char *hh, unsigned char *mm, unsigned cha
             -r *ss, unsigned char *ms);
  49          void Wochentag (unsigned char t);
  50          int stringLength(char* given_string);
  51          /************************ Hauptprogramm ******************************/
  52          
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 2   

  53          /* 
  54           * 000X XXXX => 0x00 = Mo
  55           * 001X XXXX => 0x20 = Di
  56           * 010X XXXX => 0x40 = Mi
  57           * 011X XXXX => 0x60 = Do
  58           * 100X XXXX => 0x80 = Fr
  59           * 101X XXXX => 0xA0 = Sa
  60           * 110X XXXX => 0xC0 = So
  61           * 111X XXXX => 0x00 = XX
  62           */
  63          
  64          void main()
  65          {
  66   1        unsigned char ss = 0x00;
  67   1        unsigned char mm = 0x00;
  68   1        unsigned char hh = 0x00;
  69   1        unsigned char dt = 0x00;
  70   1        unsigned char mt = 0x00;
  71   1        unsigned char ms = 0x00;
  72   1        unsigned char lastYY = 0x00;
  73   1        unsigned char currentYY = 0x00;
  74   1        unsigned char jahreSeitStart = 0x00;
  75   1        
  76   1        int yy;
  77   1        int aktuellesYYYY;
  78   1        
  79   1        unsigned char index;
  80   1        
  81   1        Clear_LCD();
  82   1        init_LCD();
  83   1        init_I2C();
  84   1        
  85   1        // [Schaltjahr - 28. bis 29. Februar]
  86   1        // Fr 2020-02-28 23:59:55,00
  87   1        aktuellesYYYY = 2020;
  88   1        rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x28, 0x82, 0x23, 0x59, 0x55);
  89   1        
  90   1      //  // [Schaltjahr - 29. Februar bis 01. März]
  91   1      //  // Sa 2020-02-29 23:59:55,00
  92   1      //  aktuellesYYYY = 2020;
  93   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x29, 0xA2, 0x23, 0x59, 0x55);
  94   1      
  95   1      //  // [Kein Schaltjahr - 28. Februar bis 01. März]
  96   1      //  // Mo 2022-02-28 23:59:55,00
  97   1      //  aktuellesYYYY = 2022;
  98   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x28, 0x02, 0x23, 0x59, 0x55);
  99   1      
 100   1      //  // [Heute]
 101   1      //  // Fr 2022-04-01 11:59:55,00
 102   1      //  aktuellesYYYY = 2022;
 103   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x01, 0x84, 0x11, 0x59, 0x55);
 104   1      
 105   1      //  // [Jahreswechsel 2022 auf 2023]
 106   1      //  // Sa 2022-12-31 23:59:55,00
 107   1      //  aktuellesYYYY = 2022;
 108   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x31, 0xB2, 0x23, 0x59, 0x55);
 109   1      
 110   1      //  // [Jahreswechsel 2023 auf 2024]
 111   1      //  // So 2023-12-31 23:59:55,00
 112   1      //  aktuellesYYYY = 2023;
 113   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x31, 0xD2, 0x23, 0x59, 0x55);
 114   1        
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 3   

 115   1      //  // [Jahreswechsel 2099 auf 2100]
 116   1      //  // Do 2023-12-31 23:59:55,00
 117   1      //  aktuellesYYYY = 2099;
 118   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x31, 0x72, 0x23, 0x59, 0x55);
 119   1        
 120   1      //  // [Jahreswechsel 9999 auf 0000]
 121   1      //  // Mi 2023-12-31 23:59:55,00
 122   1      //  aktuellesYYYY = 9999;
 123   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x31, 0x52, 0x23, 0x59, 0x55);
 124   1        
 125   1      //  // [Jahreswechsel 999 auf 1000]
 126   1      //  // Sa 999-12-31 23:59:55,00
 127   1      //  aktuellesYYYY = 999;
 128   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x31, 0xB2, 0x23, 0x59, 0x55);
 129   1        
 130   1      //  // [Jahreswechsel 1 auf 2]
 131   1      //  // Sa 1-12-31 23:59:55,00
 132   1      //  aktuellesYYYY = 1;
 133   1      //  rtc_settime(((aktuellesYYYY % 0x04) << 0x06) | 0x31, 0xB2, 0x23, 0x59, 0x55);
 134   1        
 135   1        
 136   1        // Aktuelles Jahr der Uhr
 137   1        lastYY = (aktuellesYYYY % 0x04);
 138   1      
 139   1        while(1)
 140   1        {
 141   2          rtc_readtime(&dt, &mt, &hh, &mm, &ss, &ms);
 142   2          
 143   2          // Millisekunden
 144   2          Text[25] = (ms & 0x0F)+ 48;
 145   2          Text[24] = (ms >> 0x04) + 48;
 146   2          
 147   2          // Sekunden
 148   2          Text[22] = (ss & 0x0F) + 48;
 149   2          Text[21] = (ss >> 0x04) + 48;
 150   2          
 151   2          // Minuten
 152   2          Text[19] = (mm & 0x0F) + 48;
 153   2          Text[18] = (mm >> 0x04) + 48;
 154   2          
 155   2          // Stunden
 156   2          Text[16] = (hh & 0x0F) + 48;
 157   2          Text[15] = (hh >> 0x04) + 48;
 158   2          
 159   2          // Tage
 160   2          Text[5] = (dt & 0x0F) + 48;
 161   2          Text[4] = ((dt & 0x30) >> 0x04) + 48;
 162   2      
 163   2          // Wochentage
 164   2          Wochentag(mt >> 0x05);
 165   2          
 166   2          // Monate
 167   2          Text[8] = (mt & 0x0F) + 48;
 168   2          Text[7] = ((mt & 0x10) >> 0x04) + 48;
 169   2          
 170   2          // Jahre
 171   2          currentYY = (dt >> 0x06);
 172   2          
 173   2          if (currentYY ^ lastYY)
 174   2          {
 175   3            lastYY = currentYY;
 176   3            jahreSeitStart++;
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 4   

 177   3          }
 178   2          
 179   2          yy = jahreSeitStart + aktuellesYYYY;
 180   2          for (index = 0x00; index < 4; index++)
 181   2          {
 182   3            Text[13 - index] = (yy % 10) + 0x30;
 183   3            yy /= 10;
 184   3          }
 185   2          
 186   2          showText(Text);
 187   2        }
 188   1      }
 189          void rtc_settime(unsigned char dt, unsigned char mt, unsigned char hh, unsigned char mm, unsigned char ss)
 190          {
 191   1        unsigned char buffer[6];
 192   1        
 193   1        buffer[0] = 2;
 194   1        buffer[1] = ss;
 195   1        buffer[2] = mm;
 196   1        buffer[3] = hh;
 197   1        buffer[4] = dt;
 198   1        buffer[5] = mt;
 199   1        
 200   1        i2c_xmit(RTC_ADDR,6,buffer);
 201   1      }
 202          
 203          void rtc_readtime(unsigned char *dt, unsigned char *mt, unsigned char *hh, unsigned char *mm, unsigned cha
             -r *ss, unsigned char *ms)
 204          {
 205   1        unsigned char buffer[8] = {0, 1, 2, 3, 4, 5, 6, 7};
 206   1      
 207   1        i2c_rcv(RTC_ADDR,1,8,buffer);
 208   1      
 209   1        *ms = buffer[1];
 210   1        *ss = buffer[2];
 211   1        *mm = buffer[3];
 212   1        *hh = buffer[4];
 213   1        *dt = buffer[5];
 214   1        *mt = buffer[6];
 215   1      }
 216          void Wochentag (unsigned char t)
 217          {
 218   1        switch(t)
 219   1        {
 220   2          case 0x00: 
 221   2                  Text[0] = 'M';
 222   2                  Text[1] = 'o';
 223   2            break; 
 224   2          case 0x01: 
 225   2                  Text[0] = 'D';
 226   2                  Text[1] = 'i';
 227   2            break;
 228   2          case 0x02: 
 229   2                 Text[0] = 'M';
 230   2                 Text[1] = 'i';
 231   2            break;
 232   2          case 0x03: 
 233   2                 Text[0] = 'D';
 234   2                 Text[1] = 'o';
 235   2            break;
 236   2          case 0x04: 
 237   2                 Text[0] = 'F';
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 5   

 238   2                 Text[1] = 'r';
 239   2            break;
 240   2          case 0x05: 
 241   2                 Text[0] = 'S';
 242   2                 Text[1] = 'a';
 243   2            break;
 244   2          case 0x06:
 245   2                Text[0] = 'S';
 246   2                Text[1] = 'o';
 247   2            break;
 248   2          default:
 249   2            break;
 250   2        }
 251   1      }
 252          void init_LCD()
 253          {
 254   1        int index1;
 255   1      
 256   1        //Funktion definieren: 2  zeilig, 5x7 Dots, 8 Bit
 257   1        cmd = 0x38; 
 258   1        for(index1=0;index1<7;index1++);//ca. 50ys warten (mind. 39)
 259   1        
 260   1        //Display An, Cursor Aus, Blinken aus
 261   1        cmd = 0x0C;
 262   1        for(index1=0;index1<7;index1++);//ca. 50ys warten
 263   1        
 264   1        Clear_LCD();
 265   1        
 266   1        //Entry Mode: autom Increment ohne Shift
 267   1        cmd = 0x06;
 268   1        for(index1=0;index1<7;index1++);//ca. 50ys warten
 269   1      }
 270          void Clear_LCD()
 271          {
 272   1        int index1;
 273   1          cmd = 0x02;
 274   1          cmd = 0x01;
 275   1         for(index1=0;index1<470;index1++){}//ca. 2ms warten (mind. 1.57)
 276   1      }
 277          void showChar(char value)
 278          {
 279   1        int index1;
 280   1        if(value == 0)
 281   1        {
 282   2          return;
 283   2        }
 284   1        if(value != '\n')
 285   1        {
 286   2          chr = value;
 287   2        }
 288   1        else
 289   1        {
 290   2          cmd = 0xC0; //->  Adresse auf die zweite Zeile setzen: 1 ( 1 0 0   0 0 0 0) 
 291   2                //-> DRAM Adresse 0x40!
 292   2        }
 293   1        for(index1=0;index1<10;index1++);//ca. 50ys warten
 294   1        }
 295          void showText(char* value)
 296          {
 297   1        int laenge = stringLength(value); //Textlänge wird bestimmt
 298   1        int index = 0;
 299   1        int index2 = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 6   

 300   1        int index3 = 0;
 301   1        Clear_LCD();
 302   1      
 303   1        for(index = 0;index < laenge;index++)
 304   1        {
 305   2        //Erste Zeile
 306   2          if(index3 < 16 || (index3 > 16 && index3 < 32))
 307   2          {
 308   3          if(value[index] == '\n' && index3 < 16)
 309   3          {
 310   4          index3 = 16;
 311   4          }
 312   3          else if(value[index] == '\n' && index3 > 16)
 313   3          {
 314   4          index3 = 32;
 315   4        }
 316   3        showChar(value[index]);
 317   3      
 318   3        index3++;
 319   3        }//Zweite Zeile
 320   2        else if(index3==16)
 321   2        {
 322   3        showChar('\n');
 323   3        showChar(value[index]);
 324   3        index3++;
 325   3        }
 326   2        else if(index3 >= 32)
 327   2        {
 328   3        Clear_LCD();
 329   3        index3 = -1;
 330   3        }
 331   2        }
 332   1        for(index=0;index<370;index++){}
 333   1      }
 334          void init_I2C()
 335          {
 336   1        i2c_s1 = 0x80;  // Select internal register S0
 337   1        i2c_reg = 0x55; // S0 = 0x55 (set effective own address to AAh)
 338   1        i2c_s1 = 0x0a0; // Select internal register S2
 339   1        i2c_reg = 0x1c; // System Clock is 12 MHz; SCL = 90 kHz
 340   1        i2c_s1 = 0x0c1; // Enable interface and select S0
 341   1      }
 342          
 343          void i2c_xmit(unsigned char slave_addr, unsigned char length,unsigned char * buffer)
 344          {
 345   1        unsigned char i;
 346   1        //Waiting for Bus free
 347   1        while ((i2c_s1 & 1) ==0) {};
 348   1        i2c_s1 = 0x0c5;         // START condition
 349   1      
 350   1        i2c_reg = slave_addr;   // Set slave address
 351   1      
 352   1        for (i=0; i<length; i++)
 353   1        {
 354   2          //wait for Client
 355   2          while ((i2c_s1 & 0x80) !=0);        // poll for ready
 356   2          if ((i2c_s1 & 0x08) !=0) 
 357   2          break;                // if ack, leave loop
 358   2          //send Byte
 359   2          i2c_reg = buffer[i];                // send data
 360   2        }
 361   1        while ((i2c_s1 & 0x80) !=0);          // poll for ready
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 7   

 362   1       i2c_s1 = 0x0c3; // sTOP
 363   1      }
 364          
 365          unsigned char i2c_rcv(unsigned char slave_addr, unsigned char word_addr,unsigned char length, unsigned cha
             -r * buffer)
 366          {
 367   1        unsigned char i;
 368   1        unsigned char error = 0;
 369   1        while ((i2c_s1 & 1) ==0) {}; // wait for free bus
 370   1      
 371   1        i2c_s1 = 0x0c5;  //START Condition
 372   1        i2c_reg = slave_addr;
 373   1        //wait for Slave
 374   1          while ((i2c_s1 & 0x80) !=0);
 375   1      
 376   1        if ((i2c_s1 & 0x08) !=0) 
 377   1        { // no slave ACK
 378   2            i2c_s1 = 0x0c3; // sTOP
 379   2            return 1;
 380   2        }
 381   1        else
 382   1        {}
 383   1          //Registeradresse
 384   1          i2c_reg = word_addr;
 385   1      
 386   1        //Wait for Slave
 387   1          while ((i2c_s1 & 0x80) !=0);
 388   1      
 389   1        if ((i2c_s1 & 0x08) !=0) 
 390   1        { // no slave ACK
 391   2            i2c_s1 = 0x0c3; // sTOP
 392   2            return 1;
 393   2        }
 394   1        else
 395   1        {}
 396   1      
 397   1        i2c_s1 = 0x0c5;  // START condition
 398   1       
 399   1        i2c_reg = slave_addr+1; // Set slave address
 400   1        for (i=0; i<length; i++)
 401   1        {
 402   2          //wait for Slave
 403   2          while ((i2c_s1 & 0x80) !=0);  // poll for ready
 404   2      
 405   2          if ((i2c_s1 & 0x08) !=0) { // no slave ACK
 406   3            error = 1;
 407   3            break;
 408   3          }
 409   2        else
 410   2        {}
 411   2      
 412   2        //Byte lesen
 413   2          buffer[i] = i2c_reg;
 414   2        }
 415   1        if (error == 0)
 416   1        {
 417   2          i2c_s1 = 0x040; // prepare NACK
 418   2          buffer[i] = i2c_reg; // read final byte
 419   2          while ((i2c_s1 & 0x80) !=0);
 420   2        }
 421   1      
 422   1        i2c_s1 = 0x0c3; // sTOP
C51 COMPILER V9.60.0.0   MAIN                                                              03/30/2022 11:38:51 PAGE 8   

 423   1      
 424   1        return error;
 425   1      }
 426          // Source => https://www.geeksforgeeks.org/length-string-using-pointers/
 427          int stringLength(char* given_string)
 428          {
 429   1          // variable to store the
 430   1          // length of the string
 431   1          int length = 0;
 432   1      
 433   1          while (*given_string != '\0') {
 434   2              length++;
 435   2              given_string++;
 436   2          }
 437   1        
 438   1          return length;
 439   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1245    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     44      70
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
