C51 COMPILER V9.60.0.0   MAIN                                                              12/07/2021 18:38:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c ROM(SMALL) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*****************************************************************************
   2          h e i n r i c h -h e r t z -b e r u f s k o l l e g  d e r  s t a d t  b o n n
   3          Autor:      Friedjof Noweck
   4          Klasse:     IH119
   5          Datum:      
   6          Datei:      
   7          Einsatz:    
   8          Beschreibung: 
   9          Funktionen:   
  10          ******************************************************************************
  11          Aenderungen:
  12          2021-11-08 - Anlegen dieses Projektes
  13          2021-11-23 - Hinzufügen der Funktionalitäten "umdrehen" und "stoppen"
  14          2021-12-02 - Add timer0 and Interrupts
  15          
  16          *****************************************************************************/
  17          /******************* Text im Quelltext einbinden *********************/
  18          #include "REG517A.h"
  19          
  20          /*************************** Konstanten ******************************/
  21          
  22          
  23          /*********************** globale Variablen ***************************/
  24          int timer0_counter = 0;
  25          
  26          /************************** Prototypen *******************************/
  27          void readButton(int* direction, char* stop, int* bit_index, int* max_bit_nr, char* buttonStatus);
  28          void LEDRunner(int* max_bit_nr, int* direction, int* bit_index, int* port);
  29          void flipDirection(int* direction, int* bit_index, int* max_bit_nr);
  30          void delay(int ms);
  31          void port_controller(int port, int *port_nr);
  32          int potenzieren(int basis, int potenz);
  33          
  34          // Interrupt functions
  35          void IRQ_Timer0();
  36          
  37          /************************ Hauptprogramm ******************************/
  38          
  39          void main()
  40          {
  41   1        // program vars
  42   1        const int max_bit_nr = 15;
  43   1        int direction = 1;
  44   1        int bit_index = 0;
  45   1        int port = 1;
  46   1        char stop = 0x00;
  47   1        
  48   1        char buttonStatus = 0x00;
  49   1        
  50   1        //  Timer 0 Konfigurieren
  51   1        TR0 = 0; // aushalt
  52   1        TF0 = 0; // Überlauf zurücksetzen
  53   1        IT0 = 0; // IR gelöscht
  54   1      
  55   1        TMOD = 0x01; // Timer 0 16Bit
C51 COMPILER V9.60.0.0   MAIN                                                              12/07/2021 18:38:52 PAGE 2   

  56   1        TL0  = 0xAF; // 
  57   1        TH0  = 0x3C; // = 0x3CAF
  58   1        
  59   1        // IR System Configuration
  60   1        ET0 = 1; // IR for Timer 0
  61   1        EAL = 0; // All IRs off
  62   1        
  63   1        // Set ports to zero
  64   1        P1 = 0x00;
  65   1        P4 = 0x00;
  66   1        
  67   1        while (1)
  68   1        {
  69   2          readButton(&direction, &stop, &bit_index, &max_bit_nr, &buttonStatus);
  70   2          
  71   2          if (stop == 0x00)
  72   2          {
  73   3            LEDRunner(&max_bit_nr, &direction, &bit_index, &port);
  74   3          }
  75   2          else
  76   2          { }
  77   2        }
  78   1      }
  79          
  80          void IRQ_Timer0() interrupt 1
  81          {
  82   1        TR0 = 0; // aushalt
  83   1        TF0 = 0; // Überlauf zurücksetzen
  84   1      }
  85          
  86          void readButton(int* direction, char* stop, int* bit_index, int* max_bit_nr, char* buttonStatus)
  87          {
  88   1        char button2 = *buttonStatus & 0x02;
  89   1        // Port 5 wird abgefragt
  90   1        if ((P5 & 0x01) == 0x00 && (*buttonStatus & 0x01) == 0x00)
  91   1        {
  92   2          *buttonStatus = *buttonStatus | 0x01;
  93   2          
  94   2          flipDirection(direction, bit_index, max_bit_nr);
  95   2        }
  96   1        else if ((P5 & 0x01) == 0x01 && (*buttonStatus & 0x01) == 0x01)
  97   1        {
  98   2          *buttonStatus = *buttonStatus & 0x0FE;
  99   2        }
 100   1        // Port 6 wird abgefragt
 101   1        if ((P6 & 0x01) == 0x00 &&  button2 == 0x00)
 102   1        {
 103   2          *buttonStatus = *buttonStatus | 0x02;
 104   2          
 105   2          if (*stop == 1)
 106   2          {
 107   3            *stop = 0x00;
 108   3          }
 109   2          else
 110   2          {
 111   3            *stop = 0x01;
 112   3          }
 113   2        }
 114   1        else if ((P6 & 0x01) == 0x01 && button2 == 0x02)
 115   1        {
 116   2          *buttonStatus = *buttonStatus & 0x0FD;
 117   2        }
C51 COMPILER V9.60.0.0   MAIN                                                              12/07/2021 18:38:52 PAGE 3   

 118   1        delay(50);
 119   1      }
 120          
 121          void flipDirection(int* direction, int* bit_index, int* max_bit_nr)
 122          {
 123   1        if (*direction == 0x01)
 124   1        {
 125   2          *direction = 0x00;
 126   2        }
 127   1        else
 128   1        {
 129   2          *direction = 0x01;
 130   2        }
 131   1        
 132   1        *bit_index = (*max_bit_nr - *bit_index) + 1;
 133   1      }
 134          
 135          void LEDRunner(int* max_bit_nr, int* direction, int* bit_index, int* port)
 136          {
 137   1        int index = 0;
 138   1        
 139   1        if (*bit_index <= *max_bit_nr)
 140   1        {
 141   2          if (*direction == 1)
 142   2          {
 143   3            if (*bit_index <= 7)
 144   3            {
 145   4              *port = 1;
 146   4              index = *bit_index;
 147   4            }
 148   3            else
 149   3            {
 150   4              *port = 4;
 151   4              index = 0x07 - (*max_bit_nr - *bit_index);
 152   4            }
 153   3          }
 154   2          else
 155   2          {
 156   3            if (*bit_index <= 7)
 157   3            {
 158   4              *port = 4;
 159   4              index = 0x07 - *bit_index;
 160   4            }
 161   3            else
 162   3            {
 163   4              *port = 1;
 164   4              index = *bit_index - *max_bit_nr;
 165   4            }
 166   3          }
 167   2          // switch LED's
 168   2          port_controller(index, port);
 169   2          
 170   2          // add one to the Bit Index
 171   2          *bit_index += 1;
 172   2        }
 173   1        else
 174   1        {
 175   2          // reset Bit Index
 176   2          *bit_index = 1;
 177   2          
 178   2          if (*direction == 1)
 179   2          {
C51 COMPILER V9.60.0.0   MAIN                                                              12/07/2021 18:38:52 PAGE 4   

 180   3            *direction = 0x00;
 181   3          }
 182   2          else
 183   2          {
 184   3            *direction = 0x01;
 185   3          }
 186   2        }
 187   1      }
 188          
 189          
 190          void port_controller(int port, int *port_nr)
 191          {
 192   1        char portOn = 0x00;
 193   1      
 194   1        // turn all bits off
 195   1        P1 = P1 & 0x00;
 196   1        P4 = P4 & 0x00;
 197   1      
 198   1        if (*port_nr == 1)
 199   1        {
 200   2          // turn bit on
 201   2          portOn = potenzieren(2, port);
 202   2          P1 = P1 | portOn;
 203   2        }
 204   1        else if (*port_nr == 4)
 205   1        {
 206   2          // turn bit on
 207   2          portOn = potenzieren(2, port);
 208   2          P4 = P4 | portOn;
 209   2        }
 210   1        else
 211   1        { }
 212   1      }
 213          
 214          
 215          void delay(int ms)
 216          {
 217   1       int index1 = 0;
 218   1       int index2 = 0;
 219   1      
 220   1        for (index1 = 0; index1 <= (ms * 2); index1++)
 221   1        {
 222   2          for (index2 = 0; index2 <= 1000; index2++)
 223   2          { }
 224   2        }
 225   1      }
 226          
 227          
 228          int potenzieren(int basis, int potenz)
 229          {
 230   1        // init index
 231   1        int positivePotenz = potenz;
 232   1        int index = 0;
 233   1        int zwischenergebnis = 1;
 234   1      
 235   1        if (potenz < 0) {
 236   2          positivePotenz = potenz * (-1);
 237   2        }
 238   1        
 239   1        // die Potenz in einer for-Schleife berechnen
 240   1        for (index = 0; index < positivePotenz; index = index + 1)
 241   1        {
C51 COMPILER V9.60.0.0   MAIN                                                              12/07/2021 18:38:52 PAGE 5   

 242   2          // das Zwischenergebnis wird in der Variablen "zwischenergebnis" gespeichert
 243   2          zwischenergebnis = zwischenergebnis * basis;
 244   2        }
 245   1      
 246   1        return zwischenergebnis;
 247   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    862    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      58
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
