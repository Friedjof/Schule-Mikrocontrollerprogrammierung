C51 COMPILER V9.60.0.0   MAIN                                                              12/09/2021 21:08:59 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*****************************************************************************
   2          h e i n r i c h -h e r t z -b e r u f s k o l l e g  d e r  s t a d t  b o n n
   3          Autor:      Friedjof Noweck
   4          Klasse:     IH119
   5          Datum:      2021-11-08
   6          Datei:      main.c
   7          Einsatz:    Auf dem REG517A Microcontroller
   8          Beschreibung: Lauflicht zweier zusammengeschalteter LED Leisten.
   9          Funktionen:   lässt dieses Lauflicht per Taster kontrollieren.
  10          ******************************************************************************
  11          Aenderungen:
  12          2021-11-08 - Anlegen dieses Projektes
  13          2021-11-23 - Hinzufügen der Funktionalitäten "umdrehen" und "stoppen"
  14          2021-12-02 - Add timer0 and Interrupts
  15          2021-12-08 - Interrupt modification
  16          2021-12-09 - Conversion of the delay function
  17          
  18          *****************************************************************************/
  19          /******************* Text im Quelltext einbinden *********************/
  20          #include "REG517A.h"
  21          
  22          /*************************** Konstanten ******************************/
  23          
  24          
  25          /*********************** globale Variablen ***************************/
  26          int timer0_default = 10;
  27          int timer0_counter = 10;
  28          
  29          /************************** Prototypen *******************************/
  30          void readButton(int* direction, char* stop, int* bit_index, int* max_bit_nr, char* buttonStatus);
  31          void LEDRunner(int* max_bit_nr, int* direction, int* bit_index, int* port);
  32          void flipDirection(int* direction, int* bit_index, int* max_bit_nr);
  33          void delay(int ms, int* direction, char* stop, int* bit_index, int* max_bit_nr, char* buttonStatus);
  34          void port_controller(int port, int *port_nr);
  35          int potenzieren(int basis, int potenz);
  36          
  37          // Interrupt functions
  38          void IRQ_Timer0();
  39          
  40          /************************ Hauptprogramm ******************************/
  41          
  42          void main()
  43          {
  44   1        // program vars
  45   1        const int max_bit_nr = 15;
  46   1        int direction = 1;
  47   1        int bit_index = 0;
  48   1        int port = 1;
  49   1        char stop = 0x00;
  50   1        
  51   1        char buttonStatus = 0x00;
  52   1        
  53   1        // Timer 0 Konfigurieren
  54   1        TR0 = 0; // aushalt
  55   1        TF0 = 0; // Überlauf zurücksetzen
C51 COMPILER V9.60.0.0   MAIN                                                              12/09/2021 21:08:59 PAGE 2   

  56   1        IT0 = 0; // IR gelöscht
  57   1      
  58   1        TMOD = 0x01; // Timer 0 16Bit
  59   1        TL0  = 0xAF; // 
  60   1        TH0  = 0x3C; // = 0x3CAF
  61   1        
  62   1        // IR System Configuration
  63   1        ET0 = 1; // IR for Timer 0
  64   1        EAL = 0; // All IRs off
  65   1        
  66   1        // Set ports to zero
  67   1        P1 = 0x00;
  68   1        P4 = 0x00;
  69   1        
  70   1        EAL = 1;
  71   1        while (1)
  72   1        {
  73   2          delay(500, &direction, &stop, &bit_index, &max_bit_nr, &buttonStatus);
  74   2          
  75   2          if (stop == 0x00)
  76   2          {
  77   3            LEDRunner(&max_bit_nr, &direction, &bit_index, &port);
  78   3          }
  79   2          else
  80   2          { }
  81   2        }
  82   1      }
  83          void readButton(int* direction, char* stop, int* bit_index, int* max_bit_nr, char* buttonStatus)
  84          {
  85   1        char button2 = *buttonStatus & 0x02;
  86   1        // Port 5 wird abgefragt
  87   1        if ((P5 & 0x01) == 0x00 && (*buttonStatus & 0x01) == 0x00)
  88   1        {
  89   2          *buttonStatus = *buttonStatus | 0x01;
  90   2          
  91   2          flipDirection(direction, bit_index, max_bit_nr);
  92   2        }
  93   1        else if ((P5 & 0x01) == 0x01 && (*buttonStatus & 0x01) == 0x01)
  94   1        {
  95   2          *buttonStatus = *buttonStatus & 0x0FE;
  96   2        }
  97   1        // Port 6 wird abgefragt
  98   1        if ((P6 & 0x01) == 0x00 &&  button2 == 0x00)
  99   1        {
 100   2          *buttonStatus = *buttonStatus | 0x02;
 101   2          
 102   2          if (*stop == 1)
 103   2          {
 104   3            *stop = 0x00;
 105   3          }
 106   2          else
 107   2          {
 108   3            *stop = 0x01;
 109   3          }
 110   2        }
 111   1        else if ((P6 & 0x01) == 0x01 && button2 == 0x02)
 112   1        {
 113   2          *buttonStatus = *buttonStatus & 0x0FD;
 114   2        }
 115   1      }
 116          void flipDirection(int* direction, int* bit_index, int* max_bit_nr)
 117          {
C51 COMPILER V9.60.0.0   MAIN                                                              12/09/2021 21:08:59 PAGE 3   

 118   1        if (*direction == 0x01)
 119   1        {
 120   2          *direction = 0x00;
 121   2        }
 122   1        else
 123   1        {
 124   2          *direction = 0x01;
 125   2        }
 126   1        
 127   1        *bit_index = (*max_bit_nr - *bit_index) + 1;
 128   1      }
 129          
 130          void LEDRunner(int* max_bit_nr, int* direction, int* bit_index, int* port)
 131          {
 132   1        int index = 0;
 133   1        
 134   1        if (*bit_index <= *max_bit_nr)
 135   1        {
 136   2          if (*direction == 1)
 137   2          {
 138   3            if (*bit_index <= 7)
 139   3            {
 140   4              *port = 1;
 141   4              index = *bit_index;
 142   4            }
 143   3            else
 144   3            {
 145   4              *port = 4;
 146   4              index = 0x07 - (*max_bit_nr - *bit_index);
 147   4            }
 148   3          }
 149   2          else
 150   2          {
 151   3            if (*bit_index <= 7)
 152   3            {
 153   4              *port = 4;
 154   4              index = 0x07 - *bit_index;
 155   4            }
 156   3            else
 157   3            {
 158   4              *port = 1;
 159   4              index = *bit_index - *max_bit_nr;
 160   4            }
 161   3          }
 162   2          // switch LED's
 163   2          port_controller(index, port);
 164   2          
 165   2          // add one to the Bit Index
 166   2          *bit_index += 1;
 167   2        }
 168   1        else
 169   1        {
 170   2          // reset Bit Index
 171   2          *bit_index = 1;
 172   2          
 173   2          if (*direction == 1)
 174   2          {
 175   3            *direction = 0x00;
 176   3          }
 177   2          else
 178   2          {
 179   3            *direction = 0x01;
C51 COMPILER V9.60.0.0   MAIN                                                              12/09/2021 21:08:59 PAGE 4   

 180   3          }
 181   2        }
 182   1      }
 183          void port_controller(int port, int *port_nr)
 184          {
 185   1        char portOn = 0x00;
 186   1      
 187   1        // turn all bits off
 188   1        P1 = P1 & 0x00;
 189   1        P4 = P4 & 0x00;
 190   1      
 191   1        if (*port_nr == 1)
 192   1        {
 193   2          // turn bit on
 194   2          portOn = potenzieren(2, port);
 195   2          P1 = P1 | portOn;
 196   2        }
 197   1        else if (*port_nr == 4)
 198   1        {
 199   2          // turn bit on
 200   2          portOn = potenzieren(2, port);
 201   2          P4 = P4 | portOn;
 202   2        }
 203   1        else
 204   1        { }
 205   1      }
 206          int potenzieren(int basis, int potenz)
 207          {
 208   1        // init index
 209   1        int positivePotenz = potenz;
 210   1        int index = 0;
 211   1        int zwischenergebnis = 1;
 212   1      
 213   1        if (potenz < 0) {
 214   2          positivePotenz = potenz * (-1);
 215   2        }
 216   1        
 217   1        // die Potenz in einer for-Schleife berechnen
 218   1        for (index = 0; index < positivePotenz; index = index + 1)
 219   1        {
 220   2          // das Zwischenergebnis wird in der Variablen "zwischenergebnis" gespeichert
 221   2          zwischenergebnis = zwischenergebnis * basis;
 222   2        }
 223   1      
 224   1        return zwischenergebnis;
 225   1      }
 226          
 227          void delay(int ms, int* direction, char* stop, int* bit_index, int* max_bit_nr, char* buttonStatus)
 228          {
 229   1        TL0 = 0xAF; // 
 230   1        TH0 = 0x3C; // = 0x3CAF
 231   1        
 232   1        ET0 = 1;
 233   1        TR0 = 1;
 234   1        
 235   1        timer0_counter = ms / 50;
 236   1        
 237   1        while (timer0_counter > 0)
 238   1        {
 239   2          readButton(direction, stop, bit_index, max_bit_nr, buttonStatus);
 240   2        }
 241   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              12/09/2021 21:08:59 PAGE 5   

 242          void IRQ_Timer0() interrupt 1
 243          {
 244   1        TR0 = 0; // timer0 ausschalten
 245   1        TF0 = 0; // Überlauf zurücksetzen
 246   1        
 247   1        TL0 = 0xAF; // 
 248   1        TH0 = 0x3C; // = 0x3CAF
 249   1        
 250   1        if (timer0_counter >= 1)
 251   1        {
 252   2          timer0_counter--;
 253   2        
 254   2          TR0 = 1; // timer0 einschalten
 255   2        }
 256   1        else
 257   1        { }
 258   1      }
 259          
 260          
 261          
 262          
 263          
 264          
 265          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    970    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      75
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
